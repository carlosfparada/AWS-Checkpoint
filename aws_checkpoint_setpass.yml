---

- name: Get nodes from Inventory and add to Groups
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - include_role: 
      name: utils_hosts_aws

- name: Setup Checkpoint
  hosts: "{{ groups['checkpoint'][0] }}"
  connection: local
  gather_facts: no
  vars_files: vars/main.yml
  tasks:

  - name: Wait until First Time Configuration Wizard completes
    ansible.builtin.stat:
      path: "/etc/virc"
    register: file_data

  - debug:
      var: file_data

  - debug:
      var: file_dataa


  # cat private-key.pem | ansible-vault encrypt_string  --stdin-name 'private_key' --output private-key.vault
  - ansible.builtin.include_vars: files/private-key.yml
    delegate_to: localhost

  - name: Copy private key locally
    ansible.builtin.copy:
      content: "{{ private_key }}"
      dest: /tmp/private-key.pem
      mode: '0600'
    delegate_to: localhost

  - ansible.builtin.set_fact:
      private_ip: "{{ item.private_ip_address }}"
      prefix: "{{ ec2_subnet_cidr | ansible.utils.ipaddr('prefix') }}"
      gateway: "{{ ec2_subnet_cidr | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
      dns: "{{ ec2_subnet_cidr | ansible.utils.ipaddr('2') | ansible.utils.ipaddr('address') }}"
    loop: "{{ hostvars[groups['checkpoint'][0]].network_interfaces }}"
    when: item.attachment.device_index == 0 
    delegate_to: localhost

  - ansible.builtin.set_fact:
      sha512_hash: "{{ new_password | hash('sha512') }}"
    delegate_to: localhost

  # https://community.checkpoint.com/t5/Cloud-Network-Security/CloudGuard-Network-security-default-password/td-p/201985
  - name: Set admin initial password and config system
    ansible.builtin.expect:
      command: "ssh -o StrictHostKeyChecking=no -i /tmp/private-key.pem admin@{{ groups['checkpoint'][0] }}"
      # echo: true
      responses:
        # In order to configure your system, please access the Web UI and finish the First Time Wizard.
        # set user admin password
        # i-047b52cf6b7891b2c> set user admin password-hash {{ new_password | password_hash('md5') }}
        "i-.*>":
          - "set user admin password-hash {{ new_password | password_hash('md5') }}"
          - "set expert-password-hash {{ new_password | password_hash('md5') }}"
          #- "set grub2-password-hash {{ new_password | password_hash('sha512') }}"
          - "set grub2-password-hash grub.pbkdf2.sha512.10000.F8781604CB68554AFD2058F78C77D888CF4E4F6FA3DB28099F1C8A29A4A0C9120DDA8DC40EDED72B8644023D2341A760D1B435AD68CFB832371070DE4CC82F65.C00297338E54F194E51B310D61ECEAD651BCD15EDFE488166B87ACC21DD600FC44C83F8F65BDC81CA24F39B64F66D8BBC033BBBE3FBC96B3A96C78B391E7DDB2"
          - "set user admin shell /bin/bash"
          - "save config"
          # WORKS, NEED REBOOT AFTER
          # - config_system --config-string "hostname=checkpoint-1&mgmt_admin_name=admin&mgmt_admin_passwd='Admin123$%&'&mgmt_admin_radio=gaia_admin&mgmt_gui_clients_radio=any&install_security_managment=true&install_security_gw=true&install_mgmt_primary=true&install_mgmt_secondary=false&gateway_daip=false&download_info=true&upload_info=true&domainname=ansible.redhat.com&ipstat_v4=manually&ipaddr_v4=10.0.0.253&masklen_v4=24&default_gw_v4=10.0.0.1&ipstat_v6=off&primary=10.0.0.2&timezone='Europe/Lisbon'"
          - "config_system --config-string \"hostname=checkpoint-1&mgmt_admin_name=admin&mgmt_admin_passwd='{{new_password}}'&mgmt_admin_radio=gaia_admin&mgmt_gui_clients_radio=any&install_security_managment=true&install_security_gw=true&install_mgmt_primary=true&install_mgmt_secondary=false&gateway_daip=false&download_info=true&upload_info=true&domainname=ansible.redhat.com&ipstat_v4=manually&ipaddr_v4={{private_ip}}&masklen_v4={{prefix}}&default_gw_v4={{gateway}}&ipstat_v6=off&primary={{dns}}&timezone='Europe/Lisbon'\""
          # - save config
          # - exit     
        # "checkpoint-1>":
        #   - save config
        #   - exit
          # - 'mgmt_cli -r true --domain MDS set api-settings accepted-api-calls-from "All IP addresses"'
          # - api restart
    no_log: false # hide passwords on logs
    delegate_to: localhost

  - name: Wait until First Time Configuration Wizard completes
    ansible.builtin.stat:
      path: "/etc/.wizard_accepted"
    register: file_data
    until: file_data.stat.exists
    retries: 60
    delay: 30

  - name: Sleep for 10 additional seconds and continue
    wait_for:
      timeout: 10
    delegate_to: localhost

  - name: Rebooting
    ansible.builtin.command: "shutdown -r now"

  - name: Wait until FortiManager boots up
    wait_for:
      port: 22
      state: started
      timeout: 600
      delay: 30
      host: "{{ groups['checkpoint'][0] }}"
    delegate_to: localhost



  # - name: Wait until Checkpoint comes back
  #   wait_for:
  #     port: 22
  #     state: started
  #     timeout: 1800
  #     delay: 10
  #     host: "{{ groups['checkpoint'][0] }}"  

  # - name: Sleep for 10 seconds and continue with play
  #   wait_for:
  #     timeout: 10
  #   delegate_to: localhost

  # https://community.checkpoint.com/t5/Cloud-Network-Security/CloudGuard-Network-security-default-password/td-p/201985
  # - name: Save configs
  #   ansible.builtin.expect:
  #     command: "ssh -o StrictHostKeyChecking=no -i /tmp/private-key.pem admin@{{ groups['checkpoint'][0] }}"
  #     # echo: true
  #     responses:
  #       "checkpoint-1>":
  #         # - 'mgmt_cli -r true --domain MDS set api-settings accepted-api-calls-from "All IP addresses"'
  #         # - 'mgmt_cli -r true set api-settings accepted-api-calls-from "All IP addresses" --domain "System Data"'
  #         # - 'mgmt_cli -u user -p password -m x.y.z.w --domain "System Data"''
  #         # - api restart
  #         - save config
  #         - exit
  #   no_log: false # hide passwords on logs

# - name: Setup Windows
#   hosts: groups['windows'][0]
#   connection: local
#   gather_facts: no
#   vars_files: vars/main.yml
#   vars:
#     # ansible_become_user: user
#     # ansible_become_pass: password
#   tasks:
#     - name: Copying from Ansible to Windows local disk
#       ansible.windows.win_copy:
#         src: files/Check_Point_R81.20_T631_SmartConsole.exe
#         dest: C:\
#         remote_src: yes
#         force: True
#       become: True
#       become_method: runas

#     - name: Install exe file
#       ansible.windows.win_package:
#         path: C:\Check_Point_R81.20_T631_SmartConsole.exe
#         arguments: /install /passive /norestart
